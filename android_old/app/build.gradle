apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'  // ✅ this connects to the plugin we added above

android {
    namespace "com.rydex.app"

    // ✅ Tell Gradle exactly which Android SDK versions to use
    compileSdkVersion 35

    defaultConfig {
        applicationId "com.rydex.app"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // ✅ Make Java + Kotlin use the same version (fixes previous JVM mismatch)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}




repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // ✅ Explicit stable versions
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    implementation "androidx.core:core-splashscreen:1.0.1"

    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
}


apply from: 'capacitor.build.gradle'

// ✅ Conditionally apply Google Services plugin if present
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.exists() && servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch (Exception e) {
    logger.lifecycle("google-services.json not found; skipping google-services plugin")
}
